package main.problemAndSolving.leetcode.leetcode_20200814;

//给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
//
// 如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。
//
// 注意：你不能在买入股票前卖出股票。
//
//
//
// 示例 1:
//
// 输入: [7,1,5,3,6,4]
//输出: 5
//解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
//     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
//
//
// 示例 2:
//
// 输入: [7,6,4,3,1]
//输出: 0
//解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
//
// Related Topics 数组 动态规划
// 比较简单，拿当前价格与历史最低价作差记录最大差即可，因为这里要求低买高卖，且先买后卖，耗时12m
// 执行耗时:1 ms,击败了99.00% 的Java用户
//		内存消耗:39.5 MB,击败了88.68% 的Java用户
public class Solution {
    public int maxProfitI(int[] prices) {
        if (0 == (prices.length >> 1)) {
            return 0;
        }
        int res = 0;
        int min = prices[0];
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] < min) {
                min = prices[i];
            } else if (res < prices[i] - min) {
                res = prices[i] - min;
            }
        }
        return res;
    }

    //给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
//
// 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
//
// 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
//
//
//
// 示例 1:
//
// 输入: [7,1,5,3,6,4]
//输出: 7
//解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
//     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
//
//
// 示例 2:
//
// 输入: [1,2,3,4,5]
//输出: 4
//解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
//     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
//     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
//
//
// 示例 3:
//
// 输入: [7,6,4,3,1]
//输出: 0
//解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
//
//
//
// 提示：
//
//
// 1 <= prices.length <= 3 * 10 ^ 4
// 0 <= prices[i] <= 10 ^ 4
//
// Related Topics 贪心算法 数组
//比上个题目稍难一点，曾经做过类似的题目，由于漏算了最后的涨停段出现一次提交错误，本次用时还是太长，用时22m
// 执行耗时:1 ms,击败了99.52% 的Java用户
//		内存消耗:39.7 MB,击败了54.43% 的Java用户
//简化代码后：
//		执行耗时:1 ms,击败了99.52% 的Java用户
//		内存消耗:39.5 MB,击败了84.66% 的Java用户
    public int maxProfitII(int[] prices) {
        if (0 == (prices.length >> 1)) {
            return 0;
        }
        int res = 0;
        int min = prices[0];
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] < prices[i - 1]) {//降价时需要进行操作
                if (prices[i - 1] != min) {//降价前有高峰，将高峰与历史最低值作差，计入结果
                    res += (prices[i - 1] - min);
                }
                min = prices[i];//降价后记录最低价格
            }
        }
        return res + (prices[prices.length - 1] - min);//计入最后涨停阶段的利润
    }
}
