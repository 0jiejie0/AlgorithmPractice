package main.problemAndSolving.leetcode_20200710;
//给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
//
// 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
//
//
//
// 示例 1:
//
// 给定数组 nums = [1,1,2],
//
//函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
//
//你不需要考虑数组中超出新长度后面的元素。
//
// 示例 2:
//
// 给定 nums = [0,0,1,1,1,2,2,3,3,4],
//
//函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
//
//你不需要考虑数组中超出新长度后面的元素。
//
//
//
//
// 说明:
//
// 为什么返回数值是整数，但输出的答案是数组呢?
//
// 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
//
// 你可以想象内部操作如下:
//
// // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
//int len = removeDuplicates(nums);
//
//// 在函数里修改输入数组对于调用者是可见的。
//// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
//for (int i = 0; i < len; i++) {
//    print(nums[i]);
//}
//
// Related Topics 数组 双指针
//一遍过，用时16m
//runtime:1 ms
//memory:41.2 MB

public class Solution {
    /**
     * 思路：访问一个元素时和上一个元素比较，相同继续看下一个元素，不相同则将此元素移到以当前计数为下标的数组位置，并计数
     *
     * @param nums
     * @return
     */
    public int removeDuplicates(int[] nums) {
        int res = 1;
        if (nums == null) {//异常条件：空指针
            return 0;
        } else if (nums.length < 2) {//临界条件：长度为0或1，无需移动
            return nums.length;
        }
        for (int i = 1; i < nums.length; i++) {//第一个元素第一个出现，一定计数一次
            if (nums[i - 1] != nums[i]) {//当前位置的两元素相异：1挪动元素，2计数
                nums[res] = nums[i];
                res++;
            }
        }
        return res;
    }
//给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。
//
// 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。
//
// 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
//
//
//
// 示例 1:
//
// 给定 nums = [3,2,2,3], val = 3,
//
//函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。
//
//你不需要考虑数组中超出新长度后面的元素。
//
//
// 示例 2:
//
// 给定 nums = [0,1,2,2,3,0,4,2], val = 2,
//
//函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。
//
//注意这五个元素可为任意顺序。
//
//你不需要考虑数组中超出新长度后面的元素。
//
//
//
//
// 说明:
//
// 为什么返回数值是整数，但输出的答案是数组呢?
//
// 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
//
// 你可以想象内部操作如下:
//
// // nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝
//int len = removeElement(nums, val);
//
//// 在函数里修改输入数组对于调用者是可见的。
//// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
//for (int i = 0; i < len; i++) {
//    print(nums[i]);
//}
//
// Related Topics 数组 双指针
//    马虎大意致使边界条件判断不清，误测试运行了好几次，用时没能控制在10m内。。用时：14m
//    这里的提交效率比这么高，我怀疑这个题目是不是没人做？
//    执行耗时:0 ms,击败了100.00% 的Java用户
//    内存消耗:38.2 MB,击败了5.68% 的Java用户

    /**
     * 这个与上一道题目相比就更为简单，比较当前元素和给定值是否相等，相等则不进行操作，不相等：1将当前元素挪到以当前计数为下标的数组位置，2计数
     * （可能导致时间复杂度变为2n）
     * 好吧并不是特别简单，这里的边界条件比较复杂一些，我马虎了
     *
     * @param nums
     * @param val
     * @return
     */
    public int removeElement(int[] nums, int val) {
        int res = 0;
        if (nums == null || nums.length < 1) {
            return 0;
        }
        for (int i = 0; i < nums.length; i++) {
            if (val != nums[i]) {
                nums[res] = nums[i];
                res++;
            }
        }
        return res;
    }
}
